//server 
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

int main() {
    int sockfd, confd;
    struct sockaddr_in server_address, client_address;
    char buffer1[100], buffer2[100];
    socklen_t client_address_len;

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        return 1;
    }

    // Configure server address
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(5555);
    server_address.sin_addr.s_addr = INADDR_ANY;

    printf("Waiting for Client request...\n");

    // Bind socket
    if (bind(sockfd, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        perror("Socket binding failed");
        close(sockfd);
        return 1;
    }

    // Listen for incoming connections
    if (listen(sockfd, 10) < 0) {
        perror("Socket listening failed");
        close(sockfd);
        return 1;
    }

    client_address_len = sizeof(client_address);

    // Accept client connection
    if ((confd = accept(sockfd, (struct sockaddr *)&client_address, &client_address_len)) < 0) {
        perror("Connection acceptance failed");
        close(sockfd);
        return 1;
    }
    printf("Client request accepted...\n");

    // Read data from client
    if (read(confd, buffer1, sizeof(buffer1)) <= 0) {
        perror("Failed to read data from client");
        close(confd);
        close(sockfd);
        return 1;
    }
    int nH = atoi(buffer1);
    printf("From Client: Number of Hours: %d\n", nH);

    if (read(confd, buffer2, sizeof(buffer2)) <= 0) {
        perror("Failed to read data from client");
        close(confd);
        close(sockfd);
        return 1;
    }
    int aH = atoi(buffer2);
    printf("From Client: Amount per Hour: %d\n", aH);

    // Calculate salary and send it to the client
    int salary = nH * aH;
    snprintf(buffer1, sizeof(buffer1), "%d", salary);
    if (write(confd, buffer1, strlen(buffer1)) <= 0) {
        perror("Failed to send data to client");
        close(confd);
        close(sockfd);
        return 1;
    }
    printf("Sent to Client: Total Salary: %s\n", buffer1);

    // Close connections
    close(confd);
    close(sockfd);
    return 0;
}


-----------------------------------------------------------------------------------------------

//client

#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

int main() {
    int sockfd;
    struct sockaddr_in server_address;
    char send_buffer1[100], send_buffer2[100], recv_buffer[100];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        return 1;
    }

    // Configure server address
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(5555);
    server_address.sin_addr.s_addr = inet_addr("127.0.0.1"); // Replace with server IP if needed

    // Connect to server
    if (connect(sockfd, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        perror("Connection to server failed");
        close(sockfd);
        return 1;
    }
    printf("Connected to the Server...\n");

    // Get input from user and send it to the server
    printf("Enter Number of Hours: ");
    scanf("%s", send_buffer1);
    if (write(sockfd, send_buffer1, strlen(send_buffer1)) <= 0) {
        perror("Failed to send data to server");
        close(sockfd);
        return 1;
    }

    printf("Enter Amount per Hour: ");
    scanf("%s", send_buffer2);
    if (write(sockfd, send_buffer2, strlen(send_buffer2)) <= 0) {
        perror("Failed to send data to server");
        close(sockfd);
        return 1;
    }

    // Receive response from server
    if (read(sockfd, recv_buffer, sizeof(recv_buffer)) <= 0) {
        perror("Failed to receive data from server");
        close(sockfd);
        return 1;
    }
    recv_buffer[strlen(recv_buffer)] = '\0';
    printf("From Server: Total Salary: %s\n", recv_buffer);

    // Close connection
    close(sockfd);
    return 0;
}

----------------------------------------------------------------------------

// OS program SJF


#include <stdio.h>

int main() {
    int n, bt[20], p[20], wt[20], tat[20], total = 0;
    float avg_wt, avg_tat;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("p%d: ", i + 1);
        scanf("%d", &bt[i]);
        p[i] = i + 1;
    }

    // Sorting processes based on burst time
    for (int i = 0; i < n - 1; i++) {
        int pos = i;
        for (int j = i + 1; j < n; j++) {
            if (bt[j] < bt[pos])
                pos = j;
        }

        int temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;

        temp = p[i];
        p[i] = p[pos];
        p[pos] = temp;
    }

    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
        total += wt[i];
    }

    avg_wt = (float)total / n;

    // Calculating Turnaround Time
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
        total += tat[i];
    }

    avg_tat = (float)total / n;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("p%d\t\t%d\t\t%d\t\t%d\n", p[i], bt[i], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", avg_wt);
    printf("Average Turnaround Time: %.2f\n", avg_tat);

    return 0;
}

